services:
  php-api-01: &php-api
    build:
      context: ./php-api
    networks:
      - app-network
    volumes:
      - ./php-api:/var/www/html
    working_dir: /var/www/html
    extra_hosts:
      host.docker.internal: host-gateway
    environment:
      APP_ENV: ${APP_ENV}
      SESSION_HANDLER: redis
      SESSION_PATH: tcp://redis:${REDIS_PORT}?auth=${REDIS_PASSWORD}  
      SESSION_MAX_TIME_LIFE: 86400
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      mysql:
          condition: service_healthy
      redis:
          condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200MB
  php-api-02:
    <<: *php-api
  nginx:
    image: nginx:alpine
    ports:
      - ${APP_PORT}:80
    restart: unless-stopped
    volumes:
      - ./php-api:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php-api-01
      - php-api-02
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 100MB
  mysql:
    image: mysql:8.3.0
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./php-api/db:/docker-entrypoint-initdb.d
      - ./php-api/db/my.cnf:/etc/mysql/my.cnf
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200MB
  frontend:
    build:
      context: ./frontend
    networks:
      - app-network
    volumes:
      - ./frontend:/app
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:5173"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200MB
  mongodb:
    image: mongo:4.4.0
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_INITDB_PORT}:${MONGO_INITDB_PORT}"
    healthcheck:
      test: ["CMD", "mongo", "admin", "--eval", "db.stats()"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 150M
  go-reports:
    build: 
      context: ./reports
    volumes:
      - ./reports:/app
    environment:
      - MONGO_CONNECTION_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_INITDB_HOST}:${MONGO_INITDB_PORT}/
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
  go-notifications:
    build: 
      context: ./notifications
    volumes:
      - ./notifications:/app
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
  mongodb-client:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_INITDB_HOST}:${MONGO_INITDB_PORT}/
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "mongo", "admin", "--eval", "db.stats()"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200MB
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: unless-stopped
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100M
  kafka:
    image: bitnami/kafka:latest
    restart: unless-stopped
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_ADVERTISED_LISTENERS:PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 150M
  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=microservices
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_PORT}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:${ZOOKEEPER_PORT}
    depends_on:
      - kafka
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200MB
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - go-reports
      - go-notifications
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100MB
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100MB
volumes:
  redis_data:
networks:
   app-network:
